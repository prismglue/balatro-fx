go.property("hand_size", 8) -- make cards 'larger' so they space out better

local CARD_LEAVE_INTERVAL = 0.07

function init(self)
	-- get the total size of the zone
	self.zone_size = go.get('#sprite', 'size')
	print("ZoneSize: " .. self.zone_size)
	
	-- get the total size of a card
	self.card_size = go.get('/card_img#sprite', 'size')
	self.half_card = self.card_size.x/2
	print("CardSize: " .. self.card_size)

	--self.hand_size = 8 -- increases and decreases on gameplay events
	self.card_count = 0 -- lua doesn't know how many items are in a table and doesn't offer a builtin for counting
	-- you can be overdealt and your hand can be larger than hand_size, so it's math.max between them
	self.cards = {}
end

function update(self, dt)
end

function fixed_update(self, dt)
end

local function get_selected_cards(self)
	local selectcount = 0
	local selected = {}
	local mypos = go.get_position()
	for i, card in next, self.cards do
		local pos = go.get_position(card.url)
		-- don't bother with 'card_select' messages, just find out if it's away from the baseline, heh
		if card.selected or mypos.y ~= pos.y then
			selectcount = selectcount + 1
			selected[selectcount] = card
		end
	end
	return selected, selectcount
end

local function get_card_space(self, size)
	local total_cards = math.max(self.hand_size, self.card_count)
	return size / total_cards, total_cards
end

local function get_card_x(self, card_idx)
	local x_start = go.get_position().x - (self.zone_size.x/2)
	--local x_end = go.get_position().x + (self.zone_size.x/2)
	local space_per_card = get_card_space(self, self.zone_size.x)

	--local card_slot_offset = (space_per_card * self.card_count)
	return (space_per_card * card_idx) + x_start + (space_per_card/2)
end

local function animate_remove(self, removed)
	-- it's actually relatively simple
	-- for each card, move all the cards towards the empty spot in a leftofremove/rightofremove fashion
	local x_start = go.get_position().x - (self.zone_size.x/2)
	local x_end = go.get_position().x + (self.zone_size.x/2)
	local removed_urls = {}
	for i, remove in next, removed do
		self.card_count = self.card_count - 1
		local space_per_card = get_card_space(self, self.zone_size.x)
		local reali = 0
		removed_urls[remove.url] = remove
		local remove_index = 0
		for ci, card in next, self.cards do
			if removed_urls[card.url] == nil then
				local delay = CARD_LEAVE_INTERVAL*(i-1)
				-- card's current position is irrelevant, tell it where it's going
				local emptyslots = self.hand_size-self.card_count
				local x = (space_per_card * reali) + self.half_card + x_start + (emptyslots*(space_per_card/2))
				local orig = go.get_position(card.url).x
				-- x is offset by card space for every missing card
				reali = reali + 1
				print('animating ' .. card.url .. ' to a new x position? ' .. x .. " esd: " .. emptyslots)
				go.animate(card.url, 'position.x', go.PLAYBACK_ONCE_FORWARD, x, go.EASING_LINEAR, CARD_LEAVE_INTERVAL, delay)
			elseif card.url == remove.url then
				remove_index = ci
			end
		end
		print("removed " .. table.remove(self.cards, remove_index).url)
	end
end

local function discard_cards(self)
	print("nothing")
end

function on_message(self, message_id, message, sender)
	-- I need to know when I'm about to receive a card, and what suit it is, so I can pick a slot for it and reply
	if message_id == hash("card_announce") then
		-- high->low suits is spades, hearts, diamonds, clubs
		-- 14 is ace, 13 king, 12 queen, 11 jack, then regular numberwang
		--message.value 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2
		--message.suit  0 (spade), 1 (heart), 2 (diamond), 3 (club)
		
		local pos = go.get_position()
		local xpos = get_card_x(self, self.card_count)
		local new_card_pos = vmath.vector3(xpos, pos.y, pos.z)

		-- animate cards shoving into the deck by checking all cards are in the right position. if not, give them a nudge to where they'll be now
		if message.animate == true then
			for i, card in next, self.cards do
				local cardpos = go.get_position(card.url)
				local x2 = get_card_x(self, i-1)
				print(cardpos)
				if x2 ~= cardpos.x then
					print("unaligned: " .. x2 .. " vs " .. cardpos.x)
				end
			end
		end
		
		--print("Offering to sender " .. sender .. " from " .. x_start .. " / " .. x_end .. " total: " .. total_cards .. " space per card " .. space_per_card .. " location: " .. xpos .. " slot: " .. card_slot_offset)
		self.card_count = self.card_count + 1
		self.cards[self.card_count] = { url = message.url }
		msg.post(sender, "zone_offer", { url = message.url, target = new_card_pos, idx = message.idx })
	elseif message_id == hash("zone_offer") then
		--print("ZONE OFFER")
		--pprint(message)
		msg.post(message.url, 'play', {target = message.target, delay = CARD_LEAVE_INTERVAL*message.idx})
	elseif message_id == hash('card_select') then
		for i, card in next, self.cards do
			if card.url == sender then
				card.selected = not card.selected
			end
		end
	elseif message_id == hash('discard') then
		local selected, selected_count = get_selected_cards(self)
		pprint(selected)
		print(selected_count)
		-- throw these cards away index by index with a delay offset by the iteration... anyway
		self.discard_pos = go.get_position('/discard_pile')
		for i, remove in next, selected do
			msg.post(remove.url, 'fling', { target = self.discard_pos, delay = CARD_LEAVE_INTERVAL*(i-1)})
		end
		-- shuffle cards together
		animate_remove(self, selected)
		-- draw x cards
		--local draw = self.hand_size - self.card_count
		msg.post('/deck', 'reset', {count=selected_count})
		msg.post('/deck', 'clicked')
	elseif message_id == hash('hand_size') then
		self.hand_size = message.count
	elseif message_id == hash('play') then
		local selected, selected_count = get_selected_cards(self)
		pprint(selected)
		-- tell the play zone how many cards to expect
		msg.post('/play_zone', 'hand_size', { count = selected_count })
		-- announce these to the play_zone
		for i, card in next, selected do
			msg.post('/play_zone', "card_announce", {url = card.url, idx = i-1})
		end
		-- shuffle cards together
		animate_remove(self, selected)
		msg.post('/deck', 'reset', {count=selected_count})
	end
end
