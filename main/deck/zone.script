function init(self)
	-- get the total size of the zone
	self.zone_size = go.get('#sprite', 'size')
	print("ZoneSize: " .. self.zone_size)
	
	-- get the total size of a card
	self.card_size = go.get('/card_img#sprite', 'size')
	self.half_card = self.card_size.x/2
	print("CardSize: " .. self.card_size)

	self.hand_size = 8 -- increases and decreases on gameplay events
	self.card_count = 0 -- lua doesn't know how many items are in a table and doesn't offer a builtin for counting
	-- you can be overdealt and your hand can be larger than hand_size, so it's math.max between them
	self.cards = {}
end

function update(self, dt)
end

function fixed_update(self, dt)
end

function on_message(self, message_id, message, sender)
	-- I need to know when I'm about to receive a card, and what suit it is, so I can pick a slot for it and reply
	if message_id == hash("card_announce") then
		-- high->low suits is spades, hearts, diamonds, clubs
		-- 14 is ace, 13 king, 12 queen, 11 jack, then regular numberwang
		--message.value 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2
		--message.suit  0 (spade), 1 (heart), 2 (diamond), 3 (club)
		local x_start = go.get_position().x - (self.zone_size.x/2)
		local x_end = go.get_position().x + (self.zone_size.x/2)
		local total_cards = math.max(self.hand_size, self.card_count)
		local space_per_card = (x_end-x_start) / total_cards

		local total_bounds = 0 -- this shrinks... relative to hand size... hmm i guess it's scaled by the 
		local new_card_pos = vmath.vector3((space_per_card * self.card_count) + self.half_card, 0, go.get_position().z)
		
		print("Bound start: " .. x_start .. " / " .. x_end .. " total: " .. total_cards .. " space per card " .. space_per_card .. " location: " .. new_card_pos)
		self.card_count = self.card_count + 1
		msg.post(sender, "zone_ready_for_card", { url = message.url, x = new_card_pos.x, y = new_card_pos.y })
	end
end

-- seems like when you add the cards, you reduce the percentage of space available for each card
-- how do you compute that?
-- okay we have space from 0-100
-- card starts at 50 because it's half of all available space, that's how the current computation works
-- now you have two cards, where do they go?
-- in balatro, they get spaced based on the expected hand size. so when you discard cards, they don't change their relative distance...
-- unless you have been over-dealt, then when your card leaves, the overdealt hand shri	nks

-- the tilt of the card is also relative to it's position - 5 in a 9 card hand faces straight up

-- okay i think i almost understand this. you must be in some cohort that can be divided an infinite number of times
-- it's actually really simple!
-- 8 is your card total, so if you are card 6, you know you're 6 units of the hand_size divided by your card total
-- i guess the final trouble is the 'float around the centre' behaviour. units are sorta assigned from the middle outwards.
-- ok so you deal 4 / 8 cards, you only have 4 left. they push each other together, hmm...

-- you could shrink the total available board area around the centre point?
-- that way, everything is still positioned relative to the centre, but the maximum bounds are redefined
-- ah yes. this makes a lot of sense. it's a card-sized-hole that grows based on the total number of cards. then you divide across the card sized hole.

-- cards are 'served' in order but they place themselves in rank/suit order
-- so 5 can be dealt then 2, 5 will go left, 2 will go right

-- https://www.youtube.com/watch?v=bFOfsbmB2O4 this video has a fat hand and a few hours of gameplay to scrub through for details


-- you know, the only way to play the deal animation is to know all of the card positions in advance
-- as they are dealt, they already know their final position - there is no re-shuffling
--  they aren't sorted! there are tonnes of 'card-join' events