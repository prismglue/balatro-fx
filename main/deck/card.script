local SELECTED_OFFSET = 0

function init(self)
	if SELECTED_OFFSET == 0 then
		SELECTED_OFFSET = go.get("#body", "size").y / 2
		print(SELECTED_OFFSET)
	end
	print("I'm a new card")
	self.click_to_deck = true
	self.selected = false
	self.ylock = false
	self.ylockval = (-1)
end

function update(self)
	if self.ylock then
		local pos = go.get_position()
		if self.ylockval == -1 then
			self.ylockval = pos.y
		else
			pos.y = self.ylockval
		end
		go.set_position(pos)
	elseif self.ylockval ~= -1 then
		self.ylockval = -1
	end
end

local function reached_furthest_wiggle(self, url, property_id)
	print("wiggle reached!")
	go.animate(url, 'euler', go.PLAYBACK_LOOP_PINGPONG, vmath.vector3(0, 0, -3), go.EASING_LINEAR, 5)
end

local function did_animate_deck_top(self, url, property_id)
	print("top deck animation complete")
	-- this should let us start wiggling and stretching in place
	-- start wiggling by nicely animating out to the 'furthest' position so we can use LOOP_PINGPONG to do the rest
	--go.set(url, "euler", vmath.vector3(0, 0, -3))
	msg.post(url, 'dealt')
	go.animate(url, 'euler', go.PLAYBACK_ONCE_FORWARD, vmath.vector3(0, 0, 3), go.EASING_LINEAR, 2.5, 0, reached_furthest_wiggle)
end

function on_message(self, message_id, message, sender)
	if message_id == hash("wiggle") then
	elseif message_id == hash('cursor_over') then
		print(go.get_id() .. ": " .. message_id)
		-- this is relevant to zones that know someone is dragging a card
	elseif message_id == hash('dealt') then
		self.click_to_deck = false
	elseif message_id == hash('fling') or message_id == hash('play') then
		--print("fling to destination: ")
		--pprint(message)
		if message.delay == nil then
			message.delay = 0
		end
		if message_id == hash('play') then
			go.animate('.', "position", go.PLAYBACK_ONCE_FORWARD, message.target, go.EASING_LINEAR, 0.1, message.delay)
		else
			go.animate('.', "position", go.PLAYBACK_ONCE_FORWARD, message.target, go.EASING_LINEAR, 0.1, message.delay, did_animate_deck_top)
		end
	elseif message_id == hash("clicked") then
		print("Card: " .. go.get_id() .. " clicked")
		if self.click_to_deck then
			msg.post("/deck", message_id, message, sender)
			self.click_to_deck = false
			return
		elseif self.selected == false then
			print("selecting card")
			self.selected = true
			local pos = go.get_position()
			self.z = pos.z
			pos.z = 9
			go.set_position(pos)
			go.animate('.', "position.y", go.PLAYBACK_ONCE_FORWARD, (pos.y + SELECTED_OFFSET), go.EASING_LINEAR, 0.05)
		else
			print("deselecting card")
			local pos = go.get_position()
			pos.z = self.z
			go.set_position(pos)
			self.selected = false
			go.animate('.', "position.y", go.PLAYBACK_ONCE_FORWARD, (pos.y - SELECTED_OFFSET), go.EASING_LINEAR, 0.05)
		end
		print("Card action unbound")
	elseif message_id == hash("drag_end") then
		if self.click_to_deck then
			msg.post('/deck', 'clicked')
			self.click_to_deck = false
		end
		--self.ylock = false
	end
end

-- linked list?